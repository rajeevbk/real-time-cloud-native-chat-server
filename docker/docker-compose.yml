# Docker Compose file for Chat Server Infrastructure
# Version: 3.8
services:
  # MySQL Database
  mysql:
    image: mysql:8.0.35
    container_name: chat-server-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-chat_server}
      MYSQL_USER: ${MYSQL_USER:-chatuser}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-chatpassword123}
    volumes:
      - mysql_data:/var/lib/mysql
      # This path assumes the 'docker' folder is in the same directory as this file
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-rootpassword}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - chat-server-network

  # Redis Cache
  redis:
    image: redis:7.2.3-alpine
    container_name: chat-server-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispassword}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chat-server-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12.8-management
    container_name: chat-server-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
      - "61613:61613"
      - "15674:15674"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-password}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chat-server-network

  # Cassandra Database
  cassandra:
    image: cassandra:4.1.3
    container_name: chat-server-cassandra
    restart: unless-stopped
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: ChatServerCluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_SEEDS: cassandra
      # CASSANDRA_AUTHENTICATOR: PasswordAuthenticator # Disabled for easier local dev
      # CASSANDRA_AUTHORIZER: CassandraAuthorizer     # Disabled for easier local dev
      MAX_HEAP_SIZE: 512M
      HEAP_NEWSIZE: 100M
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - chat-server-network

  # Keycloak Identity and Access Management
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.0
    container_name: chat-server-keycloak
    command: start-dev --import-realm
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: mysql
      KC_DB_URL_HOST: mysql
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB:-keycloak}
      KC_DB_USERNAME: ${KEYCLOAK_USER:-keycloak_user}
      KC_DB_PASSWORD: ${KEYCLOAK_PASSWORD:-keycloak_password123}
    volumes:
      # This volume mount is the key to automation.
      # It assumes your realm file is in ./docker/keycloak/realms/
      - ./docker/keycloak/realms:/opt/keycloak/data/import
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 80s
    networks:
      - chat-server-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  cassandra_data:
    driver: local

networks:
  chat-server-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16